from operator import call
import os
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (Message, ReplyKeyboardMarkup, 
                           KeyboardButton, InlineKeyboardMarkup,
                           InlineKeyboardButton, CallbackQuery,
                           FSInputFile, InputMediaPhoto)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.register_fsm import MainMenu, Register
from aiogram.fsm.context import FSMContext
from text.text import gift_text, delivery_text, loyalty_text


router = Router()


@router.message(Command('main_menu'))
async def main_menu(update: Message | CallbackQuery) -> None:
    if isinstance(update, CallbackQuery):
        message = update.message
    else:
        message = update
    reply_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ë–∞–ª–∞–Ω—Å –∏\n—É—Ä–æ–≤–µ–Ω—å')], 
        [KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É')],
        [KeyboardButton(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')],
        
        ],
        resize_keyboard=True,
        )
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—éüëá',
        reply_markup=reply_kb,
    )


@router.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É')
async def get_card(message: Message) -> None:
    barcode_image = FSInputFile('barcodes/images/01234567.jpg')
    barcode_num = '0123-4567'
    try:
        await message.answer_photo(
            photo=barcode_image,
            caption=f'<b>–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã: {barcode_num}</b>',
            parse_mode='HTML'
        )
    except TelegramBadRequest as e:
        await message.answer(
            text='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ'
        )


@router.message(F.text == '–ë–∞–ª–∞–Ω—Å –∏\n—É—Ä–æ–≤–µ–Ω—å')
async def get_balance(message: Message) -> None:
    balance = 150
    level = 'bronze'
    await message.answer(
        text=f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –±–æ–Ω—É—Å–æ–≤\n–£—Ä–æ–≤–µ–Ω—å: {level}'
    )


@router.message(F.text == '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
async def more_options(message: Message) -> None:
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥ –ü–æ–¥–∞—Ä–∫–æ–≤', callback_data='gifts')],
        [InlineKeyboardButton(text='–î–æ—Å—Ç–∞–≤–∫–∞', callback_data='delivery')],
        [InlineKeyboardButton(text='–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', callback_data='work')],
        [InlineKeyboardButton(text='–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', callback_data='loyalty')],
        [InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')],
    ])
    await message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª',
        reply_markup=inline_kb,
    )


@router.callback_query(F.data == 'gifts')
async def get_gifts(call: CallbackQuery) -> None:
    await call.message.answer(
        text=gift_text,
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'delivery')
async def get_delivery_info(call: CallbackQuery) -> None:
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í–æ–ª—å—Å–æ–≤', url='https://eda.yandex.ru/ulyanovsk/r/vol_sov?placeSlug=volsov_zhxsp')],
        [InlineKeyboardButton(text='Gonzo', url='https://eda.yandex.ru/r/gonzo')],
        [InlineKeyboardButton(text='–ê–Ω—Ç—Ä–µ—Å–æ–ª—å', url='https://antresol.drugierestorany.ru/dostavka')]
    ])
    await call.message.answer(
        delivery_text,
        reply_markup=inline_kb
    )


@router.callback_query(F.data == 'loyalty')
async def get_loyalty_info(call: CallbackQuery) -> None:
    await call.message.answer(
        text=loyalty_text,
        parse_mode='HTML'
    )